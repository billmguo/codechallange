In the convolutional neural network CNN, the size of the input layer corresponding to an element in a layer output is determined
as a receptive field. For example, in the maxpooling layer, if its kenerl size is 2x2, each element in the output is the maximum of
its corresponding input 2x2 region, so the receptive field size in this layer is 2. In fact, the size of the receptive field is 
determined by the kernel size and the stride size. The formula is: rfsize = f(out, stride, ksize) = (out - 1) * stride + ksize, 
where out refers to the upper level of the receptive field. size.
When calculating, we generally assume that the size of the receptive field of the last layer is rfsize=1, and we push it backwards. 
Take VGG16 as an example:

rfsize = f(out, stride, kszize) = (out - 1) * stride + ksize;

Push backwards from the fully connected layer, rfsize of one element in the fully connected layer=1

Rfsize of pool5 = f(1, 2, 2) = (1-1)*2+2=2

Conv5_3: rfsize =f(2, 2, 2) = (2-1)*2+2=4

Conv5_2: rfsize=f(4, 1, 3) = (4-1)*1+3=6

Conv5_1: rfsize=f(6, 1, 3) = (6-1)*1+3=8


CNN implementation

for(i = 0; i < l.batch; ++i){
        for(j = 0; j < l.groups; ++j){
            float *a = l.weights + j*l.nweights/l.groups;
            float *b = net.workspace;
            float *c = l.output + (i*l.groups + j)*n*m;

            im2col_cpu(net.input + (i*l.groups + j)*l.c/l.groups*l.h*l.w,
                l.c/l.groups, l.h, l.w, l.size, l.stride, l.pad, b);
            gemm(0,0,m,n,k,1,a,k,b,n,1,c,n);
        }
}

void im2col_cpu(float* data_im,
     int channels,  int height,  int width,
     int ksize,  int stride, int pad, float* data_col) 
{
    int c,h,w;
    int height_col = (height + 2*pad - ksize) / stride + 1;
    int width_col = (width + 2*pad - ksize) / stride + 1;

    int channels_col = channels * ksize * ksize;
    for (c = 0; c < channels_col; ++c) {
        int w_offset = c % ksize;
        int h_offset = (c / ksize) % ksize;
        int c_im = c / ksize / ksize;
        for (h = 0; h < height_col; ++h) {
            for (w = 0; w < width_col; ++w) {
                int im_row = h_offset + h * stride;
                int im_col = w_offset + w * stride;
                int col_index = (c * height_col + h) * width_col + w;
                data_col[col_index] = im2col_get_pixel(data_im, height, width, channels,
                        im_row, im_col, c_im, pad);
            }
        }
    }
}

float im2col_get_pixel(float *im, int height, int width, int channels,
                        int row, int col, int channel, int pad)
{
    row -= pad;
    col -= pad;

    if (row < 0 || col < 0 ||
        row >= height || col >= width) return 0;
    return im[col + width*(row + height*channel)];
}

void gemm_nn(int M, int N, int K, float ALPHA, 
        float *A, int lda, 
        float *B, int ldb,
        float *C, int ldc)
{
    int i,j,k;
    #pragma omp parallel for
    for(i = 0; i < M; ++i){
        for(k = 0; k < K; ++k){
            register float A_PART = ALPHA*A[i*lda+k];
            for(j = 0; j < N; ++j){
                C[i*ldc+j] += A_PART*B[k*ldb+j];
            }
        }
    }
}
